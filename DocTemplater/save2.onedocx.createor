<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 dark:text-gray-200 leading-tight">
            {{ __('Dashboard') }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white dark:bg-gray-800 overflow-hidden shadow-sm sm:rounded-lg">
                <div class="p-6 text-gray-900 dark:text-gray-100">
                <script src="./js/docxtemplater.js"></script>
                <script src="./js/pizzip.js"></script>
                <script src="./js/FileSaver.js"></script>
                <script src="./js/pizzip-utils.js"></script>
                <script src="./js/exceljs.min.js"></script>
                <script src="https://cdn.jsdelivr.net/npm/docx-merger@1.2.2/dist/docx-merger.min.js"></script>
                <script src="./js/jszip.js" ></script>

                <input type="file" id="docx" />
                <input type="file"  onchange="parseExcelFile2(this)" id="excel">


                <button id="btn">Generate document</button>
                <button id="btn2">download</button>

                <script id="test">
                    </script>

                <script>
                    const docx = document.getElementById("docx");
                    const excel = document.getElementById("excel");
                    const btn = document.getElementById("btn");
                    const btn2 = document.getElementById("btn2");
                    var objects = [];
                    var files = [];
                    var merging_contents = [];

                    btn.addEventListener('click',start)
                    btn2.addEventListener('click',get)
                    function get(){
                        console.log(merging_contents)
                        merge_docx(merging_contents);
                    }

                    function read(file){
                        const reader = new FileReader();
                        reader.readAsBinaryString(file);
                        reader.onload = function (evt) {
                            const content = evt.target.result;
                            merging_contents.push(content);
                            return new Promise(resolve=>{resolve(true)})
                        }

                    }
                    function download(){
                        
                        for(var i=0; i<files.length;i++){
                            read(files[i])
                        }
                        
                    }

                    function start(){
                        for(var i=0; i<objects.length;i++){
                           generate(objects[i], false, i)
                        }
                        console.log(files)
                        setTimeout(()=>{
                            download()
                        }, 1000)
                    }

                    async function merge_docx (array)  {
                        var docx = new DocxMerger({},array);

                        docx.save('blob',function (data) {
                            saveAs(data,"output.docx");
                        });
                    }

                    function generate(values, final, i=0) {
                        const reader = new FileReader();
                    
                        if (docx.files.length === 0) {
                            alert("No files selected");
                        } 
                        reader.readAsBinaryString(docx.files.item(0));

                        reader.onerror = function (evt) {
                            console.log("error reading file", evt);
                            alert("error reading file" + evt);
                        };
                        reader.onload = function (evt) {
                            const content = evt.target.result;
                            
                            const zip = new PizZip(content);
                            const doc = new window.docxtemplater(zip, {
                                paragraphLoop: true,
                                linebreaks: true,
                            });

                            // Render the document (Replace {first_name} by John, {last_name} by Doe, ...)
                            doc.render(values);
                            
                            const blob = doc.getZip().generate({
                                type: "blob",
                                mimeType:
                                    "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                                // compression: DEFLATE adds a compression step.
                                // For a 50MB output document, expect 500ms additional CPU time
                                compression: "DEFLATE",
                            });

                            files.push(new File([blob], "output"+i))
                            // Output the document using Data-URI
                            // if(final == true){
                            //     zip2.generateAsync({type:"blob"}).then(function(content) {
                            //             saveAs(content, "example.zip");
                            //         });
                            // }
                            // else{
                            //     zip2.file("output"+i+".docx",  blob);
                            // }
                            //saveAs(blob, "output.docx");
                        };

                    }

                    function parseExcelFile2(inputElement=excel) {
                      
                        var files = inputElement.files || [];
                        if (!files.length) return;
                        var file = files[0];

                        

                        console.time();
                        
                        var reader = new FileReader();
                        reader.onloadend = function(event) {
                            var arrayBuffer = reader.result;
                            var workbook = new ExcelJS.Workbook();

                            // workbook.xlsx.read(buffer)
                            workbook.xlsx.load(arrayBuffer).then(function(workbook) {
                                console.timeEnd();
                                
                                workbook.worksheets.forEach(function (sheet) {
                                    var names = [];
                                    var values = [];
                                  

                                    for(let j=0; j<sheet._rows[0]._cells.length; j++){
                                        names.push(sheet._rows[0]._cells[j].value)
                                    }
                                    for(let i=1; i<sheet._rows.length; i++){
                                        values = [];
                                        for(let j=0; j<sheet._rows[i]._cells.length; j++){
                                           values.push([names[j], sheet._rows[i]._cells[j].value])
                                        }
                                        
                                        objects.push(Object.fromEntries(values))
                                        
                                        
                                        
                                    }
                                    
                                    

                                });
                            });

                        };
                        reader.readAsArrayBuffer(file);
                        console.log(objects)
                        return objects
                    }
                </script>
                </div>
            </div>
        </div>
    </div>
</x-app-layout>
